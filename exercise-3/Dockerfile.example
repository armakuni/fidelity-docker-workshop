# Using our image we have built previously as our base
FROM my-poetry:devel as build

# Force the stdout/stderr streams to be unbuffered, output is sent straight to terminal in case the python application crashes
# Create virtual env in the project folder
# Enforce specific version of poetry 
ENV PYTHONUNBUFFERED=true \ 
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_VERSION=1.1.13

# Working directory path for filesystem location
WORKDIR /app

# Copy our host file assets to the docker workdir location excluding files using .dockerignore
COPY . .

# Running python package manager tool from our working directory 
RUN poetry install --no-interaction --no-ansi -vvv

# Generate a build package known as a wheel
RUN poetry build 




# 2nd stage of our multistage build named production 
FROM python:3.10-alpine as production

# create a non privlidged user
# user identifier is a number assigned by Linux to each user on the system
RUN adduser --disabled-password --uid 10000 --home /home/appuser appuser

# Working directory path for filesystem location
WORKDIR /home/appuser

# Copy the python packaged wheel from our 1st stage build to our production image
COPY --from=build --chown=appuser:appuser /app/dist/*whl .

# Change to our non privlidged user
USER appuser

# Add pip deps installation directory to PATH
ENV PATH="/home/appuser/.local/bin:${PATH}"

# Install the wheel package 
RUN pip install exercise_3-0.1.0-py3-none-any.whl

# Running python flask app in our working directory
# Gunicorn is production server to spawn different processes of our app 
CMD gunicorn --bind 0.0.0.0:5000 web.app:app 
