# Using our image we have built previously as our base
FROM my-poetry:devel as build

# Force the stdout/stderr streams to be unbuffered, output is sent straight to terminal in case the python application crashes
# Create virtual env in the project folder
# Enforce specific version of poetry 
ENV PYTHONUNBUFFERED=true \ 
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_VERSION=1.1.13

# create a non privlidged user
# RUN addgroup --gid 10001 appuser && \
#     adduser --uid 10000 --system --home /home/appuser appuser && \
#     usermod -g appuser appuser

# Working directory path for filesystem location
WORKDIR /app

# Copy our host file assets to the docker workdir location excluding files using .dockerignore
COPY . .

# Running python package manager tool from our working directory 
RUN poetry install --no-interaction --no-ansi -vvv

# Generate a build package known as a wheel
RUN poetry build 

FROM python:3.10-alpine as production

# Working directory path for filesystem location
WORKDIR /app

COPY --from=build /app/dist/*whl /app

# Change our app contents to be owned by our non-root appuser and switch to user 
# RUN chown 10000:10001 -R /app
# USER appuser

RUN pip install *.whl

# Running python flask app in our working directory
# Gunicorn is production server to spawn different processes of our app 
CMD gunicorn --bind 0.0.0.0:5000 web.app:app 
